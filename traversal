BFS traversal::
class Solution {
    // Function to return Breadth First Traversal of given graph.
    public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        ArrayList<Integer> bfs=new ArrayList<Integer>();
        
        int vis[]=new int[V];
        
        Queue<Integer> q=new LinkedList<Integer>();
        
        q.add(0);
        vis[0]=1;
        bfs.add(0);
        
        while(!q.isEmpty())
        {
            Integer val=q.poll();
            
            for(Integer v:adj.get(val))
            {
                if(vis[v]==0)
                {
                    vis[v]=1;
                    q.add(v);
                    bfs.add(v);
                }
            }
        }
        
        return bfs;
        
    }
}


o/p::
V = 3, E = 2
adj = {{1,2},{},{}}

Output: 
0 1 2
------------------------------------------------------------------------------------------------------------------------------------------------------

DFS traversal::

class Solution {
    // Function to return a list containing the DFS traversal of the graph.
    public void dfs(int v,int[] visited,ArrayList<Integer> res,ArrayList<ArrayList<Integer>> adj)
    {
        visited[v]=1;
        res.add(v);
        for(Integer i:adj.get(v))
        {
            if(visited[i]==0)
            {
                dfs(i,visited,res,adj);
                
            }
        }
    }
   
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
       int visited[] =new int[V];
       ArrayList<Integer> res=new ArrayList<Integer>();
       dfs(0,visited,res,adj);
       return res;
        
    }
}

o/p::
V = 5 , adj = [[2,3,1] , [0], [0,4], [0], [2]]

Output: 0 2 4 3 1
Explanation: 
0 is connected to 2, 3, 1.
1 is connected to 0.
2 is connected to 0 and 4.
3 is connected to 0.
4 is connected to 2.
so starting from 0, it will go to 2 then 4,
and then 3 and 1.
Thus dfs will be 0 2 4 3 1.
