no of provinces::

class Solution {
    public void dfs(int v,ArrayList<ArrayList<Integer>> adj,int[] visited)
    {

       
        visited[v]=1;
        for(Integer i:adj.get(v))
        {
            if(visited[i]==0)
            {
                bfs(i,adj,visited);
            }
        }
        
        
    }
    public int findCircleNum(int[][] isConnected) {
        
        
        int v=isConnected.length;
        
        ArrayList<ArrayList<Integer>> adj=new ArrayList<ArrayList<Integer>>();
        
        for(int i=0;i<=v;i++)
        adj.add(new ArrayList<Integer>());
        
        for(int i=0;i<v;i++)
        {
            for(int j=0;j<v;j++)
            {
               if(isConnected[i][j]==1 && i!=j)
               {
                   adj.get(i+1).add(j+1);
                   adj.get(j+1).add(i+1);
               }
            }
        }
        
        // Queue<Integer> q=new LinkedList<Integer>();
        int visited[]=new int[v+1];
        int count=0;
        // bfs(3,adj,visited);
        for(int i=1;i<=v;i++)
        {
            if(visited[i]==0)
            {
                count++;
                dfs(i,adj,visited);
            }
        }
        
        return count;
    }
}

o/p::

Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
Output: 2

------------------------------------------------------------------------------------------------------------------------------------------------
